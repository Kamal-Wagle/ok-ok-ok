"use client"

import { useState } from "react"
import { Search, Download, Eye, Calendar, Tag, Filter, FileText, Bell, Clock, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"


// Sample notice data
const notices = [
  {
    id: 1,
    title: "Annual Examination Schedule 2024",
    category: "Academic",
    date: "2024-01-15",
    priority: "High",
    description: "Complete schedule for annual examinations for all classes",
    pdfUrl: "/notices/exam-schedule-2024.pdf",
    isNew: true,
    isPinned: true,
  },
  {
    id: 2,
    title: "Winter Vacation Notice",
    category: "Holiday",
    date: "2024-01-10",
    priority: "Medium",
    description: "School will remain closed for winter vacation from January 20th to February 5th",
    pdfUrl: "/notices/winter-vacation.pdf",
    isNew: true,
    isPinned: false,
  },
  {
    id: 3,
    title: "Parent-Teacher Meeting",
    category: "Event",
    date: "2024-01-08",
    priority: "High",
    description: "Monthly parent-teacher meeting scheduled for January 25th",
    pdfUrl: "/notices/ptm-january.pdf",
    isNew: false,
    isPinned: true,
  },
  {
    id: 4,
    title: "Fee Payment Reminder",
    category: "Administrative",
    date: "2024-01-05",
    priority: "Medium",
    description: "Reminder for quarterly fee payment due date",
    pdfUrl: "/notices/fee-reminder.pdf",
    isNew: false,
    isPinned: false,
  },
  {
    id: 5,
    title: "Sports Day Registration",
    category: "Event",
    date: "2024-01-03",
    priority: "Low",
    description: "Registration open for annual sports day events",
    pdfUrl: "/notices/sports-day-2024.pdf",
    isNew: false,
    isPinned: false,
  },
  {
    id: 6,
    title: "Library New Books Arrival",
    category: "General",
    date: "2024-01-01",
    priority: "Low",
    description: "New collection of books added to school library",
    pdfUrl: "/notices/library-books.pdf",
    isNew: false,
    isPinned: false,
  },
]

const categories = ["All", "Academic", "Administrative", "Event", "Holiday", "General"]
const priorities = ["All", "High", "Medium", "Low"]

export default function NoticePage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("All")
  const [selectedPriority, setSelectedPriority] = useState("All")
  const [selectedNotice, setSelectedNotice] = useState<any>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(5) // Show 5 notices per page

  const allFilteredNotices = notices.filter((notice) => {
    const matchesSearch =
      notice.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notice.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === "All" || notice.category === selectedCategory
    const matchesPriority = selectedPriority === "All" || notice.priority === selectedPriority

    return matchesSearch && matchesCategory && matchesPriority
  })

  const totalPages = Math.ceil(allFilteredNotices.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const endIndex = startIndex + itemsPerPage
  const filteredNotices = allFilteredNotices.slice(startIndex, endIndex)

  const pinnedNotices = filteredNotices.filter((notice) => notice.isPinned)
  const regularNotices = filteredNotices.filter((notice) => !notice.isPinned)

  // Reset to first page when filters change
  const handleFilterChange = () => {
    setCurrentPage(1)
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "High":
        return "bg-red-100 text-red-800 border-red-200"
      case "Medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "Low":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "Academic":
        return "bg-blue-100 text-blue-800"
      case "Administrative":
        return "bg-purple-100 text-purple-800"
      case "Event":
        return "bg-orange-100 text-orange-800"
      case "Holiday":
        return "bg-pink-100 text-pink-800"
      case "General":
        return "bg-gray-100 text-gray-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-100 rounded-full opacity-20 animate-pulse"></div>
        <div className="absolute top-1/2 -left-20 w-60 h-60 bg-green-100 rounded-full opacity-20 animate-bounce"></div>
        <div className="absolute bottom-20 right-1/4 w-40 h-40 bg-yellow-100 rounded-full opacity-20 animate-pulse"></div>
      </div>

      {/* Hero Section */}
      <section className="relative bg-gradient-to-r from-blue-600 to-blue-800 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <div className="flex items-center justify-center mb-6">
            <Bell className="h-12 w-12 mr-4" />
            <h1 className="text-4xl md:text-5xl font-bold">School Notices</h1>
          </div>
          <p className="text-xl md:text-2xl mb-8 opacity-90">
            Stay updated with important announcements and information
          </p>
          <div className="flex items-center justify-center space-x-6 text-sm">
            <div className="flex items-center">
              <FileText className="h-5 w-5 mr-2" />
              <span>{notices.length} Total Notices</span>
            </div>
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 mr-2" />
              <span>{pinnedNotices.length} Important</span>
            </div>
            <div className="flex items-center">
              <Clock className="h-5 w-5 mr-2" />
              <span>Updated Daily</span>
            </div>
          </div>
        </div>
      </section>

      <div className="container mx-auto px-4 py-12 relative z-10">
        {/* Search and Filter Section */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Filter className="h-5 w-5 mr-2" />
              Search & Filter Notices
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Search */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  type="text"
                  placeholder="Search notices..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value)
                    setCurrentPage(1)
                  }}
                />
              </div>

              {/* Category Filter */}
              <select
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={selectedCategory}
                onChange={(e) => {
                  setSelectedCategory(e.target.value)
                  setCurrentPage(1)
                }}
              >
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>

              {/* Priority Filter */}
              <select
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={selectedPriority}
                onChange={(e) => {
                  setSelectedPriority(e.target.value)
                  setCurrentPage(1)
                }}
              >
                {priorities.map((priority) => (
                  <option key={priority} value={priority}>
                    {priority === "All" ? "All Priorities" : `${priority} Priority`}
                  </option>
                ))}
              </select>
            </div>
          </CardContent>
        </Card>

        

        {/* Notices Table */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center">
                <FileText className="h-5 w-5 mr-2" />
                All Notices ({allFilteredNotices.length})
              </span>
              <div className="text-sm text-gray-600">
                Showing {startIndex + 1}-{Math.min(endIndex, allFilteredNotices.length)} of {allFilteredNotices.length}
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-left py-4 px-4 font-semibold text-gray-700">Title</th>
                    <th className="text-left py-4 px-4 font-semibold text-gray-700">Category</th>
                    <th className="text-left py-4 px-4 font-semibold text-gray-700">Date</th>
                    <th className="text-left py-4 px-4 font-semibold text-gray-700">Priority</th>
                    <th className="text-left py-4 px-4 font-semibold text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {regularNotices.map((notice, index) => (
                    <tr
                      key={notice.id}
                      className={`border-b border-gray-100 hover:bg-gray-50 transition-colors ${index % 2 === 0 ? "bg-white" : "bg-gray-25"}`}
                    >
                      <td className="py-4 px-4">
                        <div>
                          <div className="flex items-center space-x-2">
                            <h3 className="font-medium text-gray-900">{notice.title}</h3>
                            {notice.isNew && <Badge className="bg-blue-600 text-white text-xs">NEW</Badge>}
                          </div>
                          <p className="text-sm text-gray-600 mt-1">{notice.description}</p>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <Badge className={getCategoryColor(notice.category)}>
                          <Tag className="h-3 w-3 mr-1" />
                          {notice.category}
                        </Badge>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex items-center text-gray-600">
                          <Calendar className="h-4 w-4 mr-2" />
                          {new Date(notice.date).toLocaleDateString()}
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <Badge className={`${getPriorityColor(notice.priority)} border`}>{notice.priority}</Badge>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setSelectedNotice(notice)}
                            className="hover:bg-blue-50 hover:text-blue-700"
                          >
                            <Eye className="h-4 w-4 mr-1" />
                            View
                          </Button>
                          <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white">
                            <Download className="h-4 w-4 mr-1" />
                            PDF
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {filteredNotices.length === 0 && (
              <div className="text-center py-12">
                <FileText className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No notices found</h3>
                <p className="text-gray-600">Try adjusting your search or filter criteria.</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="flex items-center justify-between mt-6">
            <div className="text-sm text-gray-600">
              Page {currentPage} of {totalPages}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
              >
                Previous
              </Button>

              {/* Page numbers */}
              <div className="flex items-center space-x-1">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNum
                  if (totalPages <= 5) {
                    pageNum = i + 1
                  } else if (currentPage <= 3) {
                    pageNum = i + 1
                  } else if (currentPage >= totalPages - 2) {
                    pageNum = totalPages - 4 + i
                  } else {
                    pageNum = currentPage - 2 + i
                  }

                  return (
                    <Button
                      key={pageNum}
                      variant={currentPage === pageNum ? "default" : "outline"}
                      size="sm"
                      onClick={() => setCurrentPage(pageNum)}
                      className={currentPage === pageNum ? "bg-blue-600 text-white" : ""}
                    >
                      {pageNum}
                    </Button>
                  )
                })}
              </div>

              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
              >
                Next
              </Button>
            </div>
          </div>
        )}

        {/* Notice Detail Modal */}
        {selectedNotice && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-start justify-between">
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">{selectedNotice.title}</h2>
                    <div className="flex items-center space-x-4">
                      <Badge className={getCategoryColor(selectedNotice.category)}>{selectedNotice.category}</Badge>
                      <Badge className={`${getPriorityColor(selectedNotice.priority)} border`}>
                        {selectedNotice.priority} Priority
                      </Badge>
                      <div className="flex items-center text-gray-600">
                        <Calendar className="h-4 w-4 mr-1" />
                        {new Date(selectedNotice.date).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    onClick={() => setSelectedNotice(null)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    ✕
                  </Button>
                </div>
              </div>

              <div className="p-6">
                <p className="text-gray-700 mb-6">{selectedNotice.description}</p>

                {/* PDF Preview Placeholder */}
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-12 text-center">
                  <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">PDF Document Preview</h3>
                  <p className="text-gray-600 mb-4">Click the button below to view or download the full document</p>
                  <div className="flex justify-center space-x-4">
                    <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                      <Eye className="h-4 w-4 mr-2" />
                      View PDF
                    </Button>
                    <Button variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Download PDF
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

    </div>
  )
}
